package capi

import (
	"os"

	"sigs.k8s.io/controller-runtime/pkg/envtest"

	"github.com/davecgh/go-spew/spew"
	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"
)

// LocalControlPlane creates a local capi control plane
// to use as a management cluster.
// TODO: Add support for existing management cluster.
type LocalControlPlane struct {
	FileList       []*asset.File
	env            *envtest.Environment
	KubeconfigPath string //TODO: move to its own asset
}

var _ asset.WritableAsset = (*LocalControlPlane)(nil)

// Name returns the human-friendly name of the asset.
func (c *LocalControlPlane) Name() string {
	return "Local Control Plane"
}

// Dependencies returns the direct dependency for launching
// the local control plane.
func (c *LocalControlPlane) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.ClusterID{},
		&installconfig.InstallConfig{},
	}
}

// Generate launches the cluster and generates the terraform state file on disk.
func (c *LocalControlPlane) Generate(parents asset.Parents) (err error) {
	clusterID := &installconfig.ClusterID{}
	installConfig := &installconfig.InstallConfig{}
	parents.Get(clusterID, installConfig)

	c.env = &envtest.Environment{
		//CRDDirectoryPaths: []string{filepath.Join("..", "config", "crd", "bases")},
		AttachControlPlaneOutput: true,
	}

	etcd := os.Getenv("OPENSHIFT_INSTALL_ETCD")
	api := os.Getenv("OPENSHIFT_INSTALL_API")
	kubectl := os.Getenv("OPENSHIFT_INSTALL_KUBECTL")

	if err := os.Setenv("TEST_ASSET_KUBE_APISERVER", api); err != nil {
		return err
	}
	if err := os.Setenv("TEST_ASSET_ETCD", etcd); err != nil {
		return err
	}
	if err := os.Setenv("TEST_ASSET_KUBECTL", kubectl); err != nil {
		return err
	}

	cfg, err := c.env.Start()
	if err != nil {
		spew.Dump("ERROR STARTING")
		return err
	}

	usr := envtest.User{Name: "myuser"}
	authUsr, err := c.env.AddUser(usr, cfg)
	if err != nil {
		return err
	}

	kc, err := authUsr.KubeConfig()
	if err != nil {
		return err
	}

	tmpfile, err := os.CreateTemp("", "installer-kubeconfig")
	if err != nil {
		return err
	}

	if _, err := tmpfile.Write(kc); err != nil {
		return err
	}
	if err := tmpfile.Close(); err != nil {
		return err
	}
	c.KubeconfigPath = tmpfile.Name()

	return nil
}

// Files returns the FileList generated by the asset.
func (c *LocalControlPlane) Files() []*asset.File {
	return c.FileList
}

// Load TODO
func (c *LocalControlPlane) Load(f asset.FileFetcher) (found bool, err error) {

	return false, nil
}

func (c *LocalControlPlane) Stop() {
	c.env.Stop()
}
