package capi

import (
	"github.com/sirupsen/logrus"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"
)

var (
	// InstallDir is the directory containing install assets.
	InstallDir string
)

// CAPIControlPlane creates a local capi control plane
// to use as a management cluster.
// TODO: Add support for existing management cluster.
type CAPIControlPlane struct {
	FileList []*asset.File
}

var _ asset.WritableAsset = (*CAPIControlPlane)(nil)

// Name returns the human-friendly name of the asset.
func (c *CAPIControlPlane) Name() string {
	return "CAPI Control Plane"
}

// Dependencies returns the direct dependency for launching
// the capi control plane.
func (c *CAPIControlPlane) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.ClusterID{},
		&installconfig.InstallConfig{},
	}
}

// Generate launches the cluster and generates the terraform state file on disk.
func (c *CAPIControlPlane) Generate(parents asset.Parents) (err error) {
	if InstallDir == "" {
		logrus.Fatalf("InstallDir has not been set for the %q asset", c.Name())
	}

	clusterID := &installconfig.ClusterID{}
	installConfig := &installconfig.InstallConfig{}
	parents.Get(clusterID, installConfig)

	return nil
}

// Files returns the FileList generated by the asset.
func (c *CAPIControlPlane) Files() []*asset.File {
	return c.FileList
}

// Load TODO
func (c *CAPIControlPlane) Load(f asset.FileFetcher) (found bool, err error) {

	return false, nil
}
