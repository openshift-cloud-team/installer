package capi

import (
	"fmt"
	"os"
	"os/exec"

	"github.com/sirupsen/logrus"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"
)

var (
	// InstallDir is the directory containing install assets.
	InstallDir string
)

// CAPIControlPlane creates a local capi control plane
// to use as a management cluster.
// TODO: Add support for existing management cluster.
type CAPIControlPlane struct {
	FileList []*asset.File
	LocalCP  LocalControlPlane
}

var _ asset.WritableAsset = (*CAPIControlPlane)(nil)

// Name returns the human-friendly name of the asset.
func (c *CAPIControlPlane) Name() string {
	return "CAPI Control Plane"
}

// Dependencies returns the direct dependency for launching
// the capi control plane.
func (c *CAPIControlPlane) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.ClusterID{},
		&installconfig.InstallConfig{},
		&LocalControlPlane{},
	}
}

// Generate launches the cluster and generates the terraform state file on disk.
func (c *CAPIControlPlane) Generate(parents asset.Parents) (err error) {
	if InstallDir == "" {
		logrus.Fatalf("InstallDir has not been set for the %q asset", c.Name())
	}

	clusterID := &installconfig.ClusterID{}
	installConfig := &installconfig.InstallConfig{}
	localControlPlane := &LocalControlPlane{}
	parents.Get(clusterID, installConfig, localControlPlane)

	c.LocalCP = *localControlPlane

	kcArg := fmt.Sprintf("--kubeconfig=%s", localControlPlane.KubeconfigPath)

	// CAPI Manager
	capiManagerPath := os.Getenv("OPENSHIFT_INSTALL_CAPI_MAN")
	capiManCommand := exec.Command(capiManagerPath, kcArg, "-v=5")
	capiManCommand.Stdout = os.Stdout
	capiManCommand.Stderr = os.Stderr
	err = capiManCommand.Run()
	if err != nil {
		//expected to fail at the moment, let it flow through so we hit the stop function
		//return err
	}

	// AWS CAPI Provider
	awsManagerPath := os.Getenv("OPENSHIFT_INSTALL_CAPI_AWS")
	command := exec.Command(awsManagerPath, kcArg, "-v=5")
	command.Stdout = os.Stdout
	command.Stderr = os.Stderr
	err = command.Run()
	if err != nil {
		//expected to fail at the moment, let it flow through so we hit the stop function
		//return err
	}

	return nil
}

// Files returns the FileList generated by the asset.
func (c *CAPIControlPlane) Files() []*asset.File {
	return c.FileList
}

// Load TODO
func (c *CAPIControlPlane) Load(f asset.FileFetcher) (found bool, err error) {

	return false, nil
}
