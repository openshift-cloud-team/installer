package capi

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"

	"github.com/davecgh/go-spew/spew"
	"github.com/sirupsen/logrus"
	"sigs.k8s.io/controller-runtime/pkg/envtest"

	"github.com/openshift/installer/data"
	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"
	providers "github.com/openshift/installer/pkg/cluster-api"
)

var (
	// InstallDir is the directory containing install assets.
	InstallDir string
)

// CAPIControlPlane creates a local capi control plane
// to use as a management cluster.
// TODO: Add support for existing management cluster.
type CAPIControlPlane struct {
	FileList []*asset.File
	LocalCP  LocalControlPlane
}

var _ asset.WritableAsset = (*CAPIControlPlane)(nil)

// Name returns the human-friendly name of the asset.
func (c *CAPIControlPlane) Name() string {
	return "CAPI Control Plane"
}

// Dependencies returns the direct dependency for launching
// the capi control plane.
func (c *CAPIControlPlane) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.ClusterID{},
		&installconfig.InstallConfig{},
		&LocalControlPlane{},
	}
}

// Generate launches the cluster and generates the terraform state file on disk.
func (c *CAPIControlPlane) Generate(parents asset.Parents) (err error) {
	if InstallDir == "" {
		logrus.Fatalf("InstallDir has not been set for the %q asset", c.Name())
	}

	clusterID := &installconfig.ClusterID{}
	installConfig := &installconfig.InstallConfig{}
	localControlPlane := &LocalControlPlane{}
	parents.Get(clusterID, installConfig, localControlPlane)

	c.LocalCP = *localControlPlane

	// Create a temporary directory to unpack the cluster-api assets
	// and use it as the working directory for the envtest environment.
	manifestDir, err := os.MkdirTemp("", "openshift-cluster-api-manifests")
	if err != nil {
		return err
	}
	if err := data.Unpack(manifestDir, "/cluster-api"); err != nil {
		return err
	}

	kubeconfigArg := fmt.Sprintf("--kubeconfig=%s", localControlPlane.KubeconfigPath)

	//
	// CAPI Manager
	//
	{
		spew.Dump("STARTING CAPI")
		path := manifestDir + "/core-components.yaml"
		wh := envtest.WebhookInstallOptions{
			Paths: []string{path},
		}
		if err := wh.PrepWithoutInstalling(); err != nil {
			return err
		}
		opts := envtest.CRDInstallOptions{
			Scheme:         c.LocalCP.Env.Scheme,
			Paths:          []string{path},
			WebhookOptions: wh,
		}
		if _, err := envtest.InstallCRDs(c.LocalCP.Cfg, opts); err != nil {
			return err
		}

		capiManagerPath := os.Getenv("OPENSHIFT_INSTALL_CAPI_MAN")
		if capiManagerPath == "" {
			capiManagerPath = fmt.Sprintf("%s/cluster-api", localControlPlane.BinDir)
		}
		cmd := exec.Command(capiManagerPath,
			kubeconfigArg,
			"-v=5",
			"--health-addr=:0",
			"--metrics-bind-addr=:0",
			fmt.Sprintf("--webhook-port=%d", wh.LocalServingPort),
			fmt.Sprintf("--webhook-cert-dir=%s", wh.LocalServingCertDir),
		)
		cmd.Stdout = os.Stdout
		cmd.Stderr = os.Stderr
		go func() {
			err := cmd.Run()
			if err != nil {
				//expected to fail at the moment, let it flow through so we hit the stop function
				spew.Dump("CAPIRUN", err)
				// return err
			}
		}()

	}

	// AWS CAPI Provider
	{
		spew.Dump("STARTING CAPA")
		path := manifestDir + "/aws-infrastructure-components.yaml"
		wh := envtest.WebhookInstallOptions{
			Paths: []string{path},
		}
		if err := wh.PrepWithoutInstalling(); err != nil {
			return err
		}
		opts := envtest.CRDInstallOptions{
			Scheme:         c.LocalCP.Env.Scheme,
			Paths:          []string{path},
			WebhookOptions: wh,
		}
		if _, err := envtest.InstallCRDs(c.LocalCP.Cfg, opts); err != nil {
			return err
		}

		awsManagerPath := os.Getenv("OPENSHIFT_INSTALL_CAPI_AWS")
		if awsManagerPath == "" {
			awsManagerPath = fmt.Sprintf("%s/cluster-api-provider-%s_%s_%s", filepath.Join(localControlPlane.BinDir, providers.AWS.Source), providers.AWS.Name, runtime.GOOS, runtime.GOARCH)
		}
		cmd := exec.Command(awsManagerPath,
			kubeconfigArg,
			"-v=5",
			"--health-addr=:0",
			"--metrics-bind-addr=:0",
			fmt.Sprintf("--webhook-port=%d", wh.LocalServingPort),
			fmt.Sprintf("--webhook-cert-dir=%s", wh.LocalServingCertDir),
		)
		cmd.Stdout = os.Stdout
		cmd.Stderr = os.Stderr
		go func() {
			err := cmd.Run()
			if err != nil {
				//expected to fail at the moment, let it flow through so we hit the stop function
				spew.Dump("AWSRUN", err)
				// return err
			}
		}()
	}

	return nil
}

// Files returns the FileList generated by the asset.
func (c *CAPIControlPlane) Files() []*asset.File {
	return c.FileList
}

// Load TODO
func (c *CAPIControlPlane) Load(f asset.FileFetcher) (found bool, err error) {

	return false, nil
}
